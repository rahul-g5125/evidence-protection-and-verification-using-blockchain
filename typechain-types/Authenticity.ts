/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AuthenticityInterface extends Interface {
  getFunction(nameOrSignature: "certifyFile" | "verifyFile"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FileCertified"): EventFragment;

  encodeFunctionData(
    functionFragment: "certifyFile",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "verifyFile", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "certifyFile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyFile", data: BytesLike): Result;
}

export namespace FileCertifiedEvent {
  export type InputTuple = [
    author: AddressLike,
    fileHash: string,
    timestamp: BigNumberish,
    fileSize: BigNumberish,
    fileExtension: string
  ];
  export type OutputTuple = [
    author: string,
    fileHash: string,
    timestamp: bigint,
    fileSize: bigint,
    fileExtension: string
  ];
  export interface OutputObject {
    author: string;
    fileHash: string;
    timestamp: bigint;
    fileSize: bigint;
    fileExtension: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Authenticity extends BaseContract {
  connect(runner?: ContractRunner | null): Authenticity;
  waitForDeployment(): Promise<this>;

  interface: AuthenticityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  certifyFile: TypedContractMethod<
    [fileSize: BigNumberish, fileHash: string, fileExtension: string],
    [void],
    "payable"
  >;

  verifyFile: TypedContractMethod<
    [fileHash: string],
    [[string, string, bigint, bigint, string]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "certifyFile"
  ): TypedContractMethod<
    [fileSize: BigNumberish, fileHash: string, fileExtension: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "verifyFile"
  ): TypedContractMethod<
    [fileHash: string],
    [[string, string, bigint, bigint, string]],
    "view"
  >;

  getEvent(
    key: "FileCertified"
  ): TypedContractEvent<
    FileCertifiedEvent.InputTuple,
    FileCertifiedEvent.OutputTuple,
    FileCertifiedEvent.OutputObject
  >;

  filters: {
    "FileCertified(address,string,uint256,uint256,string)": TypedContractEvent<
      FileCertifiedEvent.InputTuple,
      FileCertifiedEvent.OutputTuple,
      FileCertifiedEvent.OutputObject
    >;
    FileCertified: TypedContractEvent<
      FileCertifiedEvent.InputTuple,
      FileCertifiedEvent.OutputTuple,
      FileCertifiedEvent.OutputObject
    >;
  };
}
