/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Upload {
  export type AccessStruct = { user: AddressLike; access: boolean };

  export type AccessStructOutput = [user: string, access: boolean] & {
    user: string;
    access: boolean;
  };
}

export interface UploadInterface extends Interface {
  getFunction(
    nameOrSignature: "add" | "allow" | "disallow" | "display" | "shareAccess"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "allow", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "disallow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "display",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shareAccess",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disallow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "display", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shareAccess",
    data: BytesLike
  ): Result;
}

export interface Upload extends BaseContract {
  connect(runner?: ContractRunner | null): Upload;
  waitForDeployment(): Promise<this>;

  interface: UploadInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add: TypedContractMethod<
    [_user: AddressLike, url: string],
    [void],
    "nonpayable"
  >;

  allow: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  disallow: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  display: TypedContractMethod<[_user: AddressLike], [string[]], "view">;

  shareAccess: TypedContractMethod<[], [Upload.AccessStructOutput[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<
    [_user: AddressLike, url: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allow"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disallow"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "display"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "shareAccess"
  ): TypedContractMethod<[], [Upload.AccessStructOutput[]], "view">;

  filters: {};
}
